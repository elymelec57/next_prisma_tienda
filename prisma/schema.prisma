// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String
  password String 
  roles Rol[]
  products Product[]
  pedidos Pedido[]
  business Business?
}

model Rol {
  id        Int     @id @default(autoincrement())
  name     String
  users User[]
  createdAt DateTime @default(now())
}

// model RolesOnUsers {
//   user       User     @relation(fields: [userId], references: [id])
//   userId     Int // relation scalar field (used in the `@relation` attribute above)
//   rol        Rol @relation(fields: [rolId], references: [id])
//   rolId      Int // relation scalar field (used in the `@relation` attribute above)
//   assignedAt DateTime @default(now())
//   assignedBy String

//   @@id([userId, rolId])
// }

model Product {
  id       Int  @id @default(autoincrement())
  name String
  description String
  price Decimal
  image String
  user   User @relation(fields: [userId], references: [id])
  categories Category[]
  userId Int
  createdAt DateTime @default(now())
}

model Business {
  id     Int  @id @default(autoincrement())
  slug String
  name String
  slogan String
  phone String
  direcction String
  logo String
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique // relation scalar field (used in the `@relation` attribute above)
  client Client[]
}

model Client {
  id Int @id @default(autoincrement())
  name String
  email String
  phone String
  business   Business @relation(fields: [businessId], references: [id])
  businessId Int
  pedido   Pedido @relation(fields: [pedidoId], references: [id])
  pedidoId Int  @unique // relation scalar field (used in the `@relation` attribute above)
}

model Pedido {
  id       Int  @id @default(autoincrement())
  order Json
  priceFull Decimal
  status Boolean
  comprobante String
  user   User @relation(fields: [userId], references: [id])
  userId Int
  client Client?
  createdAt DateTime @default(now())
}

model Category {
  id    Int                 @id @default(autoincrement())
  name  String
  products Product[]
}

// model CategoriesOnProduct {
//   product       Product     @relation(fields: [productId], references: [id])
//   productId     Int // relation scalar field (used in the `@relation` attribute above)
//   category   Category @relation(fields: [categoryId], references: [id])
//   categoryId Int // relation scalar field (used in the `@relation` attribute above)
//   assignedAt DateTime @default(now())
//   assignedBy String

//   @@id([productId, categoryId])
// }
